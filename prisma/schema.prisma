generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model adopted_pets {
  id               Int       @id @default(autoincrement())
  user_id          Int
  pet_id           Int
  date_of_adoption DateTime? @db.Timestamp(6)
  pets             pets      @relation(fields: [pet_id], references: [pet_id], onDelete: Cascade, onUpdate: NoAction, map: "pet_fk")
  users            users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_fk")
}

model pets {
  pet_id          Int            @id @default(autoincrement())
  pet_name        String         @db.VarChar(255)
  pet_age         String         @db.VarChar(255)
  pet_species     String         @db.VarChar(255)
  pet_status      pet_status?    @default(not_adopted)
  pet_description String         @db.VarChar(255)
  pet_image       String         @db.VarChar(255)
  pet_breed       String         @db.VarChar(255)
  pet_sex         String         @db.VarChar(255)
  admin_id        Int?
  pet_birthday    DateTime?      @db.Timestamp(6)
  pet_condition   String?        @db.VarChar(255)
  pet_height      Int
  pet_weight      Int
  adopted_pets    adopted_pets[]
  applications    applications[]
  admins          admins?        @relation(fields: [admin_id], references: [admin_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id        Int            @id @default(autoincrement())
  first_name     String?        @db.VarChar(255)
  last_name      String?        @db.VarChar(255)
  username       String         @unique(map: "unique_username") @db.VarChar(255)
  email          String         @unique(map: "email") @db.VarChar(255)
  password       String         @db.VarChar(255)
  role           user_role?     @default(user)
  created_at     DateTime?      @db.Timestamp(6)
  contact_number String?        @db.VarChar(255)
  address        String?        @db.VarChar(255)
  birthday       DateTime?      @db.Timestamp(6)
  age            Int?
  valid_id       String?        @db.VarChar(255)
  adopted_pets   adopted_pets[]
  applications   applications[]
}

model applications {
  application_id     Int                 @id @default(autoincrement())
  application_date   DateTime?           @db.Timestamp(6)
  adoption_date      DateTime?           @db.Timestamp(6)
  application_status application_status? @default(applied)
  pet_id             Int
  admin_id           Int
  user_id            Int
  admins             admins              @relation(fields: [admin_id], references: [admin_id], onDelete: NoAction, onUpdate: NoAction)
  pets               pets                @relation(fields: [pet_id], references: [pet_id], onDelete: Cascade, onUpdate: NoAction)
  users              users               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model admins {
  admin_id     Int            @id @default(autoincrement())
  admin_name   String?        @db.VarChar(255)
  username     String         @unique(map: "unique_admin_username") @db.VarChar(255)
  email        String         @unique(map: "unique_admin_email") @db.VarChar(255)
  password     String         @db.VarChar(255)
  role         user_role?
  created_at   DateTime?      @db.Timestamp(6)
  applications applications[]
  pets         pets[]
}

enum pet_status {
  not_adopted @map("not adopted")
  pending
  adopted
}

enum user_role {
  user
  admin
}

enum application_status {
  applied  @map("applied")
  rejected
  approved
}
